{"version":3,"sources":["index.js"],"names":["window","document","namespace","getInspector","isCheck","options","inspector","el","querySelector","Error","Element","_inspector","createInspector","inspectorCustom","createElement","body","appendChild","style","cssText","className","message","let","status","undefined","htmlClass","blockRedirection","excludes","inspectorList","inspectorListCsstext","getExclusionSelector","_a","join","depth","currentElement","handleKeydown","event","ctrlKey","metaKey","isExpand","key","preventDefault","parent","i","parentElement","updateSelectBox","eventController","type","handleMouseDown","stopPropagation","handleKeyup","target","_b","bodyTop","currentRoot","getRootNode","originRoot","pos","remove","documentElement","childNodes","forEach","nodeType","Node","ELEMENT_NODE","tagName","offsetHeight","getBoundingClientRect","scrollBaseRoot","scrollTop","scrollLeft","width","height","top","Math","max","left","firstElementChild","innerText","nodeName","eventEmitter","path","originTarget","hasAttribute","excludedSelector","Array","prototype","slice","call","querySelectorAll","indexOf","firstChild","blockPageRedirection","isBlockIFrame","iframe","err","engine","win","htmlEl","isStart","frames","length","addEventListener","removeEventListener","replace","arg","arg2","arg3","handler","theRoomAPI","start","opts","configure","check","isArray","list","children","len","count","elList","from","stop","resetInspector","highLight","color","background","cancelHighLight","on","name","applyOptions","opt","Object","hasOwnProperty"],"mappings":";;;;;;;CAAA,CAAAA,EAAAC,EAAAC,KAGA,SAAAC,EAAAC,EAAA,CAAA,GACA,GAAA,UAAA,OAAAC,EAAAC,UAAA,CAEA,IAAAC,EAAAN,EAAAO,cAAAH,EAAAC,SAAA,EACA,GAAAC,EACA,OAAAA,EAEA,MAAA,IAAAE,MAAA,6BAAA,CACA,CACA,GAAAJ,EAAAC,qBAAAI,QAEA,OAAAL,EAAAC,UAEA,IAIAK,EAJA,GAAA,CAAAN,EAAAC,WAAAD,EAAAO,gBAkCA,OAhCAC,EAAAZ,EAAAa,cAAA,WAAA,EACAb,EAAAc,KAAAC,YAAAH,CAAA,GACAF,EAAAV,EAAAa,cAAA,KAAA,GACAG,MAAAC;;;;;;;;;;QAWAP,EAAAQ,UAAA,oBACAN,EAAAG,YAAAL,CAAA,EACAP,IACAgB,EAAAnB,EAAAa,cAAA,KAAA,EACAH,EAAAK,YAAAI,CAAA,EACAA,EAAAH,MAAAC;;;;;;;;;;;YAaAP,EAEA,MAAA,IAAAF,MAAA,mDAAA,CACA,CApDAY,IAAAC,EAAA,OAEAjB,EAAA,CACAC,UAAAiB,KAAAA,EACAC,UAAA,CAAA,EACAC,iBAAA,CAAA,EANAb,gBAAA,CAAA,EACAc,SAAA,EACA,EAoDAC,EAAA,KACAC;;;;;;;;;;EA0CAC,EAAA,WACA,IAAAC,EACA,OAAA,OAAAA,EAAAzB,EAAAqB,UAAA,KAAA,EAAAI,EAAAC,KAAA,GAAA,IAAA,EACA,EAYAC,EAAA,EACAC,EAAA,KACAC,EAAA,IACA,GAAAC,EAAAC,SAAAD,EAAAE,QAAA,CACAhB,IAAAiB,EAAA,CAAA,EAYA,GAXA,YAAAH,EAAAI,KACAD,EAAA,CAAA,EACAN,CAAA,IAEA,cAAAG,EAAAI,MACAD,EAAA,CAAA,EACAN,CAAA,IAEAA,EAAA,IACAA,EAAA,GAEAM,GAAAL,EAAA,CACAE,EAAAK,eAAA,EAEAnB,IAAAoB,EAAAR,EACA,IAAAZ,IAAAqB,EAAA,EAAAA,EAAAV,EAAAU,CAAA,GAAA,CACA,GAAA,CAAAD,EAAAE,cAAA,CACAX,EAAAU,EAAA,EACA,KACA,CACAD,EAAAA,EAAAE,aACA,CACAC,EAAAH,CAAA,CACA,CACA,CAEAI,EAAAV,EAAAW,KAAAvB,KAAAA,EAAAY,EAAAZ,KAAAA,EAAAS,CAAA,CACA,EACAe,EAAA,KACAZ,EAAAC,SAAAD,EAAAE,WACAF,EAAAK,eAAA,EACAL,EAAAa,gBAAA,EAEA,EACAC,EAAA,IAEAJ,EAAAV,EAAAW,KAAAvB,KAAAA,EAAAY,EAAAZ,KAAAA,EAAAS,CAAA,CACA,EACAY,EAAA,CAAAM,EAAA5C,EAAAD,EAAAC,aACA,IAAAwB,EAAAqB,EACAC,EAAA,EACA,IAAAC,EAAAH,EAAAI,YAAA,EACAC,EAAAjD,EAAAgD,YAAA,EAaAE,GAXAH,IAAAE,GAAA,SAAAF,GAAAA,EAAAtC,OACA,OAAAe,EAAAxB,EAAAqC,gBAAAb,EAAA2B,OAAA,EACA,OAAAN,EAAAE,EAAAtC,QAAAoC,EAAAnC,YAAAV,EAAAqC,aAAA,EAEA1C,EAAAyD,gBAAAC,WAAAC,QAAA,SAAAlB,GACAA,EAAAmB,WAAAC,KAAAC,cAAA,QAAArB,EAAAsB,UACAZ,GAAAV,EAAAuB,cAAA,EAEA,CAAA,EAGAf,EAAAgB,sBAAA,GAEAC,EAAA,SAAAd,GAAAA,EAAAtC,KAAAsC,EAAAE,EACAa,EAAA,oBAAAD,GAAAA,EAAAT,gBACAS,EAAAT,gBAAAU,UACA,EACAC,EAAA,oBAAAF,GAAAA,EAAAT,gBACAS,EAAAT,gBAAAW,WACA,EAKAC,EAAAd,EAAAc,MACAC,EAAAf,EAAAe,OACAC,EAAAC,KAAAC,IAAA,EAAAlB,EAAAgB,IAAApB,EAAAgB,CAAA,EACAO,EAAAF,KAAAC,IAAA,EAAAlB,EAAAmB,KAAAN,CAAA,EAEA/D,EAAAW,MAAAuD,IAAAA,EAAA,KACAlE,EAAAW,MAAA0D,KAAAA,EAAA,KACArE,EAAAW,MAAAqD,MAAAA,EAAA,KACAhE,EAAAW,MAAAsD,OAAAA,EAAA,KACAjE,EAAAsE,oBACAtE,EAAAsE,kBAAAC,UAAA3B,EAAA4B,SAEA,EACAC,EAAA,SAAA5C,GAKA,GAAA,CAAA,IAAAU,EAAA,OAAAV,CAAA,EAAA,CAEAd,IAAA6B,GAAA,OAAApB,EAAAK,EAAA6C,MAAA,KAAA,EAAAlD,EAAA,KAAAK,EAAAe,OACA,IAAA+B,EAAA9C,EAAAe,OACA,GAAA,EAAAlB,EACA,IAAAX,IAAAqB,EAAA,EAAAA,EAAAV,IACAkB,EAAAA,EAAAP,eADAD,CAAA,IAQA,IAFAT,EAAAiB,IAGAA,IAAA7C,EAAAC,WACA4C,CAAAA,EAAAgC,aAAA,YAAA,EAFA,CAMA,IAAAC,EAAAtD,EAAA,EACA,GAAAsD,EAEA,GAAA,GADAC,MAAAC,UAAAC,MAAAC,KAAAtF,EAAAuF,iBAAAL,CAAA,CAAA,EACAM,QAAAvC,CAAA,EACA,OAEA,cAAAf,EAAAW,MACAF,EAAAM,CAAA,EAGA7C,EAAAC,WAAAD,EAAAC,UAAAsE,oBACAc,EAAArF,EAAAC,UAAAsE,mBACAC,YACA1C,EAAAe,OAAAgB,sBAAA,EAAAM,IAAA,GACAkB,EAAAzE,MAAAuD,IAAA,OAGAkB,EAAAzE,MAAAuD,IAAA,SAKA3B,EAAAV,EAAAW,KAAAI,EAAAf,EAAA8C,EAAAjD,CAAA,CAxBA,CAhBA,CAyCA,EACA2D,EAAA,IACA,CAAA,EAGAC,EAAA,IACA,IAGA,OADAC,EAAA5F,SACA,CAAA,CAIA,CAFA,MAAA6F,GACA,MAAA,CAAA,CACA,CACA,EACAC,EAAA,SAAAjD,EAAAkD,GACA,IAAAlE,EACAmE,EAAAhG,EAAAO,cAAA,MAAA,EACA0F,EAAA,CAAAF,EAGAG,GAFAH,EAAAA,GACAhG,GACAmG,OACAC,EAAAD,EAAAC,OACA,IAAA/E,IAAAqB,EAAA,EAAAA,EAAA0D,EAAA1D,CAAA,GACAkD,EAAAO,EAAAzD,EAAA,IAEA,UAAAI,IAEAqD,EAAAzD,GAAA,mBADAwD,EACA,CAAAxD,GAEA,CACA,GAAA,OAAAZ,EAAAkE,EAAA,oBAAAlE,EAAA,GACAY,IAGAqD,EAAAjD,EAAAqD,EAAAzD,EAAA,GAEA,UAAAI,GACAzC,EAAAoB,kBAAAyE,GAEAlG,EAAAqG,iBAAA,eAAAV,CAAA,EAGAK,EAAA/F,SAAAoG,iBAAA,QAAAtB,EAAA,CAAA,CAAA,EACAiB,EAAA/F,SAAAoG,iBAAA,YAAAtB,CAAA,EACAiB,EAAA/F,SAAAoG,iBAAA,UAAAnE,CAAA,EACA8D,EAAA/F,SAAAoG,iBAAA,QAAApD,CAAA,EACA+C,EAAA/F,SAAAoG,iBAAA,YAAAtD,CAAA,EAEA,CAAA,IAAA1C,EAAAmB,YACAyE,EAAA9E,WAAA,IAAAjB,GACAoB,EAAA,WAEA,SAAAwB,IAEAkD,EAAA/F,SAAAqG,oBAAA,QAAAvB,EAAA,CAAA,CAAA,EACAiB,EAAA/F,SAAAqG,oBAAA,YAAAvB,CAAA,EACAiB,EAAA/F,SAAAqG,oBAAA,UAAApE,CAAA,EACA8D,EAAA/F,SAAAqG,oBAAA,QAAArD,CAAA,EACA+C,EAAA/F,SAAAqG,oBAAA,YAAAvD,CAAA,EAEA,CAAA,IAAA1C,EAAAmB,YACAyE,EAAA9E,UAAA8E,EAAA9E,UAAAoF,QAAA,IAAArG,EAAA,EAAA,GAEA,CAAA,IAAAG,EAAAoB,kBACAzB,EAAAsG,oBAAA,eAAAX,CAAA,EACArE,EAAA,UAEA,EACAuB,EAAA,SAAAC,EAAA0D,EAAAC,EAAAC,EAAA1E,GACA,IAAA2E,EAAAtG,EAAAyC,GACA,GAAA6D,EAAA,CAEA,GAAA,YAAA,OAAAA,EACA,MAAA,IAAAlG,MAAA,qCAAAqC,CAAA,EAGA,OAAA6D,EAAApB,KAAA,KAAAiB,EAAAC,EAAAC,EAAA1E,CAAA,CALA,CAMA,EA8EA4E,EAAA,CACAC,MA9EA,SAAAC,GACAA,GACAF,EAAAG,UAAAD,CAAA,EAGAzG,EAAAC,UAAAH,EAAA,EACA0C,EAAA,UAAA,EAEAkD,EAAA,OAAA,EACAlD,EAAA,SAAA,CACA,EAqEAmE,MA1CA,SAAAzG,GACA,GAAA6E,MAAA6B,QAAA1G,CAAA,EAAA,CACA,IAAA2G,GAzSA,IACA,IAAApF,EACA,GAAAH,EAUA,CACA,IAAAwF,EAAAxF,EAAAwF,SACAC,EAAAD,EAAAf,OACA,GAAAiB,EAAAD,EACA,IAAA/F,IAAAqB,EAAA0E,EAAA1E,EAAA2E,EAAA3E,CAAA,GAAA,CACA,IAAA/B,EAAAV,EAAAa,cAAA,KAAA,EACAH,EAAAM,MAAAC,QAAAU,EACAjB,EAAAQ,UAAA,oBACAQ,EAAAX,YAAAL,CAAA,CACA,MAGA,IAAAU,IAAAqB,EAAA2E,EAAA3E,EAAA0E,EAAA1E,CAAA,GACA,OAAAZ,EAAAqF,EAAAzE,KAAAZ,EAAA2B,OAAA,CAGA,KA1BA,CACA9B,EAAA1B,EAAAa,cAAA,gBAAA,EACA,IAAAO,IAAAqB,EAAA,EAAAA,EAAA2E,EAAA3E,CAAA,GAAA,CACA,IAAA/B,EAAAV,EAAAa,cAAA,KAAA,EACAH,EAAAM,MAAAC,QAAAU,EACAjB,EAAAQ,UAAA,oBACAQ,EAAAX,YAAAL,CAAA,CACA,CACAV,EAAAc,KAAAC,YAAAW,CAAA,CACA,CAkBA,OAAAA,CACA,GA2QApB,EAAA6F,MAAA,EACAkB,EAAAlC,MAAAmC,KAAAL,EAAAC,QAAA,EACA,IAAA9F,IAAAqB,EAAA,EAAAA,EAAAnC,EAAA6F,OAAA1D,CAAA,GAAA,CACA,IAAApC,EAAAgH,EAAA5E,GACApC,GACAsC,EAAArC,EAAAmC,GAAApC,CAAA,CAEA,CACA,KACA,CACAA,EAAAH,EAAA,CAAA,CAAA,EACAE,EAAAC,UAAAA,EACAsC,EAAArC,EAAAD,CAAA,CACA,CACA,EA2BAkH,KArEA,SAAAC,GAEA5E,EAAA,UAAA,EACAb,EAAA,EAEA+D,EAAA,MAAA,EACA,CAAA,IAAA0B,GAAApH,EAAAC,aACAA,EAAAD,EAAAC,WACAW,MAAAuD,IAAA,GACAlE,EAAAW,MAAA0D,KAAA,GACArE,EAAAW,MAAAqD,MAAA,GACAhE,EAAAW,MAAAsD,OAAA,IAEA,CAAA,IAAAlE,EAAAO,iBAEAP,MAAAA,GAAAA,EAAAC,YACA,OAAA6C,EAAA,OAAArB,EAAAzB,EAAAC,WAAA,KAAA,EAAAwB,EAAAa,gBAAAQ,EAAAM,OAAA,EACApD,EAAAC,UAAAiB,KAAAA,GAGAI,IACAA,EAAA8B,OAAA,EACA9B,EAAA,MAEAkB,EAAA,SAAA,CACA,EA6CA6E,UAhBA,CAAAC,EAAA,8BACAtH,EAAAC,YACAD,EAAAC,UAAAW,MAAA2G,WAAAD,EAEA,EAaAE,gBAXA,KACAxH,EAAAC,YACAD,EAAAC,UAAAW,MAAA2G,WAAA,QAEA,EAQAE,GA7BA,SAAAC,EAAApB,GACA,GAAA,UAAA,OAAAoB,EACA,MAAA,IAAAtH,MAAA,kDAAA,OAAAsH,CAAA,EAEA,GAAA,YAAA,OAAApB,EACA,MAAA,IAAAlG,MAAA,wCAAAsH,CAAA,EAGA1H,EAAA0H,GAAApB,CACA,EAqBAI,UAAA,SAAAD,GAEAkB,IAhTAC,EALAnB,EAqTAA,EApTA,GAAA,UAAA,OAAAA,EACA,MAAA,IAAArG,MAAA,qCAAA,EAGA,IAAAwH,KAAAnB,EACAoB,OAAA7C,UAAA8C,eAAA5C,KAAAuB,EAAAmB,CAAA,IACA5H,EAAA4H,GAAAnB,EAAAmB,GA+SA,EACA3G,OAAA,WACA,OAAAA,CACA,CACA,EACAtB,EAAAE,GAAA0G,CACA,GAAA5G,OAAAC,SAAA,SAAA","file":"index.min.js","sourcesContent":["(function (window, document, namespace) {\n    let status = 'idle';\n    // 默认配置选项\n    const options = {\n        inspector: undefined,\n        htmlClass: true,\n        blockRedirection: false,\n        createInspector: false,\n        excludes: [],\n    };\n    const getInspector = function (isCheck = false) {\n        if (typeof options.inspector === 'string') {\n            // 如果提供的 inspector 是 CSS 选择器，返回对应的元素\n            const el = document.querySelector(options.inspector);\n            if (el)\n                return el;\n            else\n                throw new Error('inspector element not found');\n        }\n        if (options.inspector instanceof Element) {\n            // 如果提供的 inspector 是 DOM 元素，直接返回\n            return options.inspector;\n        }\n        if (!options.inspector && options.createInspector) {\n            // 创建 inspector 元素\n            const inspectorCustom = document.createElement('inspector');\n            document.body.appendChild(inspectorCustom);\n            const _inspector = document.createElement('div');\n            _inspector.style.cssText = `\n        transition: all 200ms;\n        position: absolute;\n        top: 0px;\n        left: 0px;\n        width: 912px;\n        height: 630px;\n        pointer-events: none;\n        z-index: 99999999999999999999;\n        border: solid 2px red;\n      `;\n            _inspector.className = 'inspector-element';\n            inspectorCustom.appendChild(_inspector);\n            if (!isCheck) {\n                const message = document.createElement('div');\n                _inspector.appendChild(message);\n                message.style.cssText = `\n           position:absolute;\n           left:0;\n           top:-41px;\n           height:30px;\n           line-height:30px;\n           background:#333;\n           color:#fff;\n           padding:5px 10px;\n           width:max-content;\n           white-space:no-wrap;\n         `;\n            }\n            return _inspector;\n        }\n        throw new Error('inspector must be a css selector or a DOM element');\n    };\n    let inspectorList = null;\n    const inspectorListCsstext = `\n  transition: all 200ms;\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  width: 912px;\n  height: 630px;\n  pointer-events: none;\n  z-index: 99999999999999999999;\n  border: solid 2px red;\n`;\n    const getInspectors = (count) => {\n        var _a;\n        if (!inspectorList) {\n            inspectorList = document.createElement('inspector-list');\n            for (let i = 0; i < count; i++) {\n                const _inspector = document.createElement('div');\n                _inspector.style.cssText = inspectorListCsstext;\n                _inspector.className = 'inspector-element';\n                inspectorList.appendChild(_inspector);\n            }\n            document.body.appendChild(inspectorList);\n        }\n        else {\n            const children = inspectorList.children;\n            const len = children.length;\n            if (len > count) {\n                for (let i = len; i < count; i++) {\n                    const _inspector = document.createElement('div');\n                    _inspector.style.cssText = inspectorListCsstext;\n                    _inspector.className = 'inspector-element';\n                    inspectorList.appendChild(_inspector);\n                }\n            }\n            else {\n                for (let i = count; i < len; i++) {\n                    (_a = children[i]) === null || _a === void 0 ? void 0 : _a.remove();\n                }\n            }\n        }\n        return inspectorList;\n    };\n    const getExclusionSelector = function () {\n        var _a;\n        return ((_a = options.excludes) === null || _a === void 0 ? void 0 : _a.join(',')) || '';\n    };\n    const applyOptions = function (opts) {\n        if (typeof opts !== 'object') {\n            throw new Error('options is expected to be an object');\n        }\n        // 合并选项\n        for (const opt in opts) {\n            if (Object.prototype.hasOwnProperty.call(opts, opt)) {\n                options[opt] = opts[opt];\n            }\n        }\n    };\n    let depth = 0;\n    let currentElement = null;\n    const handleKeydown = (event) => {\n        if (event.ctrlKey || event.metaKey) {\n            let isExpand = false;\n            if (event.key === 'ArrowUp') {\n                isExpand = true;\n                depth++;\n            }\n            else if (event.key === 'ArrowDown') {\n                isExpand = true;\n                depth--;\n            }\n            if (depth < 0) {\n                depth = 0;\n            }\n            if (isExpand && currentElement) {\n                event.preventDefault();\n                // 更新元素层级\n                let parent = currentElement;\n                for (let i = 0; i < depth; i++) {\n                    if (!parent.parentElement) {\n                        depth = i - 1;\n                        break;\n                    }\n                    parent = parent.parentElement;\n                }\n                updateSelectBox(parent);\n            }\n        }\n        // 事件调用\n        eventController(event.type, undefined, event, undefined, depth);\n    };\n    const handleMouseDown = (event) => {\n        if (event.ctrlKey || event.metaKey) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    };\n    const handleKeyup = (event) => {\n        // 事件调用\n        eventController(event.type, undefined, event, undefined, depth);\n    };\n    const updateSelectBox = (target, inspector = options.inspector) => {\n        var _a, _b;\n        let bodyTop = 0;\n        const currentRoot = target.getRootNode();\n        const originRoot = inspector.getRootNode();\n        // 是不同的根 并且是iframe 有些根元素是shadow-root 没有body\n        if (currentRoot !== originRoot && 'body' in currentRoot && currentRoot.body) {\n            (_a = inspector.parentElement) === null || _a === void 0 ? void 0 : _a.remove();\n            (_b = currentRoot.body) === null || _b === void 0 ? void 0 : _b.appendChild(inspector.parentElement);\n        }\n        document.documentElement.childNodes.forEach(function (i) {\n            if (i.nodeType === Node.ELEMENT_NODE && i.tagName === 'DIV') {\n                bodyTop += i.offsetHeight || 0;\n            }\n        });\n        // target.getRootNode 获取当前的根元素 iframe的话就会获取iframe内嵌的视图\n        // get target element information\n        const pos = target.getBoundingClientRect();\n        // 滚轮的参考基准根元素-有body的情况下是Iframe或者 原始页面 使用currentRoot 没有的情况下 可能是影子节点 root没有body 用的原始的\n        const scrollBaseRoot = ('body' in currentRoot && currentRoot.body) ? currentRoot : originRoot;\n        const scrollTop = ('documentElement' in scrollBaseRoot && scrollBaseRoot.documentElement)\n            ? scrollBaseRoot.documentElement.scrollTop\n            : 0;\n        const scrollLeft = ('documentElement' in scrollBaseRoot && scrollBaseRoot.documentElement)\n            ? scrollBaseRoot.documentElement.scrollLeft\n            : 0;\n        // 保存当前状态（这些变量可能在未来版本中使用）\n        // currentScrollLeft = scrollLeft;\n        // currentScrollTop = scrollTop;\n        // currentBodyTop = bodyTop;\n        const width = pos.width;\n        const height = pos.height;\n        const top = Math.max(0, pos.top - bodyTop + scrollTop);\n        const left = Math.max(0, pos.left + scrollLeft);\n        // 设置 inspector 元素位置和尺寸\n        inspector.style.top = top + 'px';\n        inspector.style.left = left + 'px';\n        inspector.style.width = width + 'px';\n        inspector.style.height = height + 'px';\n        if (inspector.firstElementChild) {\n            inspector.firstElementChild.innerText = target.nodeName;\n        }\n    };\n    const eventEmitter = function (event) {\n        var _a;\n        // hook event invocation\n        // do not emit mouseover and click events\n        // if the hook event returns false\n        if (eventController('hook', event) === false)\n            return;\n        let target = ((_a = event.path) === null || _a === void 0 ? void 0 : _a[0]) || event.target;\n        const originTarget = event.target;\n        if (depth > 0) {\n            for (let i = 0; i < depth; i++) {\n                target = target.parentElement;\n                if (!target)\n                    break;\n            }\n        }\n        currentElement = target;\n        // validation --skip inspector element itself--\n        if (!target ||\n            target === options.inspector ||\n            target.hasAttribute('hint-panel')) {\n            return;\n        }\n        // do not inspect excluded elements\n        const excludedSelector = getExclusionSelector();\n        if (excludedSelector) {\n            const excludedElements = Array.prototype.slice.call(document.querySelectorAll(excludedSelector));\n            if (excludedElements.indexOf(target) >= 0)\n                return;\n        }\n        if (event.type === 'mousemove') {\n            updateSelectBox(target);\n        }\n        // 当鼠标获取的元素上边界的和浏览器高度之差小于 元素块标题的高度时把元素块放到下面展示\n        if (options.inspector && options.inspector.firstElementChild) {\n            const firstChild = options.inspector.firstElementChild;\n            if (firstChild.innerText) {\n                if (event.target.getBoundingClientRect().top < 5 + 30) {\n                    firstChild.style.top = '47px';\n                }\n                else {\n                    firstChild.style.top = '-41px';\n                }\n            }\n        }\n        // event invocation\n        eventController(event.type, target, event, originTarget, depth);\n    };\n    const blockPageRedirection = () => {\n        return true;\n    };\n    // 对Iframe 是否有访问权限\n    const isBlockIFrame = (iframe) => {\n        try {\n            // 是否有访问权限\n            iframe.document;\n            return false;\n        }\n        catch (err) {\n            return true;\n        }\n    };\n    const engine = function (type, win) {\n        var _a;\n        const htmlEl = document.querySelector('html');\n        const isStart = !win;\n        if (!win)\n            win = window;\n        const frames = win.frames;\n        const length = frames.length;\n        for (let i = 0; i < length; i++) {\n            if (isBlockIFrame(frames[i]))\n                continue;\n            if (type === 'start') {\n                if (isStart)\n                    frames[i]['__theroomWinIndexs'] = [i];\n                else\n                    frames[i]['__theroomWinIndexs'] = [\n                        ...((_a = win['__theroomWinIndexs']) !== null && _a !== void 0 ? _a : []),\n                        i,\n                    ];\n            }\n            engine(type, frames[i]);\n        }\n        if (type === 'start') {\n            if (options.blockRedirection && isStart) {\n                // block page redirection\n                window.addEventListener('beforeunload', blockPageRedirection);\n            }\n            // bind event listeners\n            win.document.addEventListener('click', eventEmitter, true);\n            win.document.addEventListener('mousemove', eventEmitter);\n            win.document.addEventListener('keydown', handleKeydown);\n            win.document.addEventListener('keyup', handleKeyup);\n            win.document.addEventListener('mousedown', handleMouseDown);\n            // add namespace to HTML tag class list\n            if (options.htmlClass === true)\n                htmlEl.className += ' ' + namespace;\n            status = 'running';\n        }\n        else if (type === 'stop') {\n            // remove binded event listeners\n            win.document.removeEventListener('click', eventEmitter, true);\n            win.document.removeEventListener('mousemove', eventEmitter);\n            win.document.removeEventListener('keydown', handleKeydown);\n            win.document.removeEventListener('keyup', handleKeyup);\n            win.document.removeEventListener('mousedown', handleMouseDown);\n            // remove namespace from HTML tag class list\n            if (options.htmlClass === true)\n                htmlEl.className = htmlEl.className.replace(' ' + namespace, '');\n            // remove blocking page redirection\n            if (options.blockRedirection === true)\n                window.removeEventListener('beforeunload', blockPageRedirection);\n            status = 'stopped';\n        }\n    };\n    const eventController = function (type, arg, arg2, arg3, depth) {\n        const handler = options[type];\n        if (!handler)\n            return;\n        if (typeof handler !== 'function') {\n            throw new Error('event handler must be a function: ' + type);\n        }\n        // call the event\n        return handler.call(null, arg, arg2, arg3, depth);\n    };\n    const start = function (opts) {\n        if (opts) {\n            theRoomAPI.configure(opts);\n        }\n        // get the inspector element\n        options.inspector = getInspector();\n        eventController('starting');\n        // start the inspection engine\n        engine('start');\n        eventController('started');\n    };\n    const stop = function (resetInspector) {\n        var _a, _b;\n        eventController('stopping');\n        depth = 0;\n        // stop the inspection engine\n        engine('stop');\n        if (resetInspector === true && options.inspector) {\n            const inspector = options.inspector;\n            inspector.style.top = '';\n            inspector.style.left = '';\n            inspector.style.width = '';\n            inspector.style.height = '';\n        }\n        if (options.createInspector === true) {\n            // remove auto generated inspector element on stop\n            if (options === null || options === void 0 ? void 0 : options.inspector) {\n                (_b = (_a = options.inspector) === null || _a === void 0 ? void 0 : _a.parentElement) === null || _b === void 0 ? void 0 : _b.remove();\n                options.inspector = undefined;\n            }\n        }\n        if (inspectorList) {\n            inspectorList.remove();\n            inspectorList = null;\n        }\n        eventController('stopped');\n    };\n    const check = function (el) {\n        if (Array.isArray(el)) {\n            const list = getInspectors(el.length);\n            const elList = Array.from(list.children);\n            for (let i = 0; i < el.length; i++) {\n                const inspector = elList[i];\n                if (inspector) {\n                    updateSelectBox(el[i], inspector);\n                }\n            }\n        }\n        else {\n            const inspector = getInspector(true);\n            options.inspector = inspector;\n            updateSelectBox(el, inspector);\n        }\n    };\n    const eventBinder = function (name, handler) {\n        if (typeof name !== 'string') {\n            throw new Error('event name is expected to be a string but got: ' + typeof name);\n        }\n        if (typeof handler !== 'function') {\n            throw new Error('event handler is not a function for: ' + name);\n        }\n        // update the event\n        options[name] = handler;\n    };\n    // 高亮\n    const highLight = (color = 'rgba(255, 229, 190, 0.4)') => {\n        if (options.inspector) {\n            options.inspector.style.background = color;\n        }\n    };\n    // 取消高亮\n    const cancelHighLight = () => {\n        if (options.inspector) {\n            options.inspector.style.background = 'unset';\n        }\n    };\n    // make it accessible from outside\n    const theRoomAPI = {\n        start: start,\n        check: check,\n        stop: stop,\n        highLight,\n        cancelHighLight,\n        on: eventBinder,\n        configure: function (opts) {\n            // merge provided options with defaults\n            applyOptions(opts);\n        },\n        status: function () {\n            return status;\n        },\n    };\n    window[namespace] = theRoomAPI;\n})(window, document, 'theRoom');\nexport {};\n"]}